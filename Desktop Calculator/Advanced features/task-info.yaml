type: edu
files:
- name: src/calculator/ApplicationRunner.java
  visible: true
  text: |
    package calculator;

    public class ApplicationRunner {
        public static void main(String[] args) {
            new Calculator();
        }
    }
  learner_created: false
- name: src/calculator/Calculator.java
  visible: true
  text: |
    package calculator;

    import javax.swing.*;

    public class Calculator extends JFrame {

        public Calculator() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(300, 400);
            setLayout(null);
            setVisible(true);
        }
    }
  learner_created: false
- name: test/CalculatorTest.java
  visible: false
  text: |-
    import calculator.Calculator;
    import org.assertj.swing.fixture.JButtonFixture;
    import org.assertj.swing.fixture.JLabelFixture;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;

    import java.awt.*;
    import java.util.Map;

    import static java.util.Map.entry;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;

    public class CalculatorTest extends SwingTest {

        private Map<Character, JButtonFixture> charToButtonMap;

        @SwingComponent(name = "Equals")
        private JButtonFixture mEqual;
        @SwingComponent(name = "Add")
        private JButtonFixture mAdd;
        @SwingComponent(name = "Subtract")
        private JButtonFixture mSub;
        @SwingComponent(name = "Divide")
        private JButtonFixture mDiv;
        @SwingComponent(name = "Multiply")
        private JButtonFixture mMult;
        @SwingComponent(name = "Zero")
        private JButtonFixture mZero;
        @SwingComponent(name = "One")
        private JButtonFixture mOne;
        @SwingComponent(name = "Two")
        private JButtonFixture mTwo;
        @SwingComponent(name = "Three")
        private JButtonFixture mThree;
        @SwingComponent(name = "Four")
        private JButtonFixture mFour;
        @SwingComponent(name = "Five")
        private JButtonFixture mFive;
        @SwingComponent(name = "Six")
        private JButtonFixture mSix;
        @SwingComponent(name = "Seven")
        private JButtonFixture mSeven;
        @SwingComponent(name = "Eight")
        private JButtonFixture mEight;
        @SwingComponent(name = "Nine")
        private JButtonFixture mNine;
        @SwingComponent(name = "Dot")
        private JButtonFixture mDot;
        @SwingComponent(name = "Clear")
        private JButtonFixture mClear;
        @SwingComponent(name = "Delete")
        private JButtonFixture mDel;
        @SwingComponent(name = "Parentheses")
        private JButtonFixture mParentheses;
        @SwingComponent(name = "PowerTwo")
        private JButtonFixture mPow;
        @SwingComponent(name = "PowerY")
        private JButtonFixture mPowerY;
        @SwingComponent(name = "SquareRoot")
        private JButtonFixture mRoot;
        @SwingComponent(name = "PlusMinus")
        private JButtonFixture mPlusMinus;


        @SwingComponent(name = "EquationLabel")
        private JLabelFixture mEquationLabel;
        @SwingComponent(name = "ResultLabel")
        private JLabelFixture mResultLabel;

        private final String powSymbol = "^";
        private final String rootSymbol = "\u221A";
        private final String plusMinusSymbol = "\u00b1";
        private final String divideSymbol = "\u00F7";
        private final String multiplySymbol = "\u00D7";
        private final String addSymbol = "\u002B";
        private final String subtractSymbol = "-";

        public CalculatorTest() {

            super(new Calculator());
        }

        private void typeText (String text, String expectedResult, boolean checkResult) {

            for (int i = 0; i < text.length(); i++) {
                JButtonFixture button = charToButtonMap.get(text.charAt(i));
                button.click();
            }
            if (checkResult) {
                if (!mResultLabel.text().trim().equals(expectedResult)) {
                    throw new WrongAnswer("Result Label contains wrong number.\n" +
                        "    Your output: " + mResultLabel.text().trim() +
                        "\nExpected output: " + expectedResult +
                        "\nEquation: " + mEquationLabel.text().trim());
                }
            } else {
                if (!mEquationLabel.text().trim().equals(expectedResult)) {
                    throw new WrongAnswer("Equation Label contains wrong values.\n" +
                        "    Your output: " + mEquationLabel.text()
                        .trim() + "\n" +
                        "Expected output: " + expectedResult);
                }
            }

            mClear.click();
        }

        private void typeText (String text, String expectedResult, boolean checkResult,
                               String feedBack) {

            for (int i = 0; i < text.length(); i++) {
                JButtonFixture button = charToButtonMap.get(text.charAt(i));
                button.click();
            }
            if (checkResult) {
                if (!mResultLabel.text().trim().equals(expectedResult)) {
                    throw new WrongAnswer(feedBack + "\n" + "Your output: " + mResultLabel.text() +
                        "\nExpected output: " + expectedResult +
                        "\nEquation: " + mEquationLabel.text().trim());
                }
            } else {
                if (!mEquationLabel.text().trim().equals(expectedResult)) {
                    throw new WrongAnswer(feedBack + "\n" + "Your output: " + mEquationLabel.text() +
                        "\nExpected output: " + expectedResult);
                }
            }

            mClear.click();
        }

        private void typeText (String text) {

            for (int i = 0; i < text.length(); i++) {
                JButtonFixture button = charToButtonMap.get(text.charAt(i));
                button.click();
            }

            mEquationLabel.foreground().requireEqualTo(Color.RED.darker());
            mClear.click();
        }

        @DynamicTest
        CheckResult test1 () {

            charToButtonMap = Map.ofEntries(
                entry('0', mZero),
                entry('1', mOne),
                entry('2', mTwo),
                entry('3', mThree),
                entry('4', mFour),
                entry('5', mFive),
                entry('6', mSix),
                entry('7', mSeven),
                entry('8', mEight),
                entry('9', mNine),
                entry('+', mAdd),
                entry('-', mSub),
                entry('*', mMult),
                entry('/', mDiv),
                entry('=', mEqual),
                entry('.', mDot),
                entry('<', mDel),
                entry('C', mClear),
                entry('^', mPow),
                entry('Y', mPowerY),
                entry('$', mRoot),
                entry('_', mPlusMinus),
                entry('(', mParentheses)

            );

            requireEnabled(mEqual, mAdd, mSub, mDiv, mMult, mOne, mTwo, mThree, mFour, mFive, mSix,
                mSeven, mEight, mNine, mZero, mDot, mClear, mDel, mPow, mPowerY,
                mRoot, mPlusMinus, mParentheses, mEquationLabel,
                mResultLabel);

            requireVisible(mEqual, mAdd, mSub, mDiv, mMult, mOne, mTwo, mThree, mFour, mFive, mSix,
                mSeven, mEight, mNine, mZero, mDot, mClear, mDel, mPow, mPowerY,
                mRoot, mPlusMinus, mParentheses, mEquationLabel,
                mResultLabel);

            return correct();
        }

        @DynamicTest()
        CheckResult test2 () {

            typeText("1", "1", false);
            typeText("1<", "", false,
                "Clicking on the Delete Button should delete the last character from the EquationLabel");
            typeText("111C", "", false,
                "Clicking on the Clear Button should delete all the characters from the EquationLabel");


            return correct();
        }

        // Pushing buttons
        @DynamicTest()
        CheckResult test3 () {

            typeText("1", "1", false);
            typeText("2", "2", false);
            typeText("3", "3", false);
            typeText("4", "4", false);
            typeText("5", "5", false);
            typeText("6", "6", false);
            typeText("7", "7", false);
            typeText("8", "8", false);
            typeText("9", "9", false);
            typeText("0", "0", false);
            typeText("1+", "1".concat(addSymbol), false);
            typeText("1-", "1".concat(subtractSymbol), false);
            typeText("1*", "1".concat(multiplySymbol), false);
            typeText("1/", "1".concat(divideSymbol), false);
            typeText("1^", "1^(2)", false);
            typeText("$", rootSymbol.concat("("), false);
            typeText("(", "(", false);
            typeText("(8(", "(8)", false);

            return correct();
        }

        //negating expressions
        @DynamicTest()
        CheckResult test4 () {

            typeText("_", "(".concat(subtractSymbol), false);
            typeText("__", "", false,
                "Clicking the PlusMinus button a consecutive time should undo/redo the negate effect.");
            typeText("2_", "(-2", false);
            typeText("2__", "2", false,
                "Clicking the PlusMinus button a consecutive time should undo/redo the negate effect.");

            return correct();
        }

        //testing calculations
        @DynamicTest()
        CheckResult test5 () {
            typeText("9+1=", "10", true);
            typeText("1-99=", "-98", true);
            typeText("9/2=", "4.5", true);
            typeText("0/7=", "0", true);
            typeText("4.5*2=", "9", true);

            return correct();
        }

        //test operator precedence
        @DynamicTest()
        CheckResult test6 () {
            //Add & Subtract
            typeText("11-5+4=", "10", true);
            typeText("2-17+5=", "-10", true);


            //Multiply & Divide
            typeText("9/2*8=", "36", true);

            //Combined
            typeText("25+9/3-8*8=", "-36", true);
            typeText("9.2/2.3*12/2.4=", "20", true);
            typeText("25+9^*3-8/8*$49(=", "261", true);
            typeText("$16(+36^/5=", "263.2", true);
            typeText("_2-2(=", "-4", true);


            return correct();
        }

        //test operator precedence with braces
        @DynamicTest
        CheckResult test7 () {
            typeText("(25+9/3-8*8(=", "-36", true);
            typeText("(8+(7-1+5((=", "19", true);
            typeText("3+8*((4+3(*2+1(-6/(2+1(=", "121", true);

            return correct();
        }

        //test formatting equations
        @DynamicTest
        CheckResult test8 () {

            typeText(".6+", "0.6".concat(addSymbol), false,
                "Your program should properly format the equation whenever an operator is inserted.");

            typeText("7.*", "7.0".concat(multiplySymbol), false,
                "Your program should properly format the equation whenever an operator is inserted.");

            typeText("*", "", false, "Equations should not start with an operator");
            typeText("+", "", false, "Equations should not start with an operator");
            typeText("-", "", false, "Equations should not start with an operator");
            typeText("/", "", false, "Equations should not start with an operator");

            typeText("2+*", "2".concat(multiplySymbol), false,
                "Clicking on an operator should override the preceding operator");

            typeText("6+/3=", "2", true);

            return correct();
        }

        //test equation validation
        @DynamicTest(feedback = "The color of EquationLabel should change to indicate invalid equations" +
            " when the EqualButton is clicked")
        CheckResult test9 () {

            typeText("2+=");
            typeText("5/0=");
            typeText("$_9((=");

            return correct();
        }

    }
  learner_created: false
- name: src/calculator/Notation.java
  visible: true
  text: |
    package calculator;

    import java.math.BigDecimal;
    import java.math.BigInteger;

    public class Notation {
        BigDecimal value;
        char operator;
        boolean isVariable;

        Notation(BigDecimal value) {
            this.value = value;
            isVariable = true;
        }

        Notation(char operator) {
            this.operator = operator;
            isVariable = false;
        }

        @Override
        public String toString() {
            return isVariable ? String.valueOf(value) : String.valueOf(operator);
        }
    }
  learner_created: true
- name: src/calculator/CalculatorUtil.java
  visible: true
  text: |
    package calculator;

    import javax.swing.*;
    import java.awt.*;
    import java.math.BigDecimal;
    import java.math.RoundingMode;
    import java.util.*;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class CalculatorUtil {
        static HashMap<Character, Integer> precedence = new HashMap<>();
        static String numberRegex = "\\d+(\\.\\d+)?"; // no direct negative number
    //    static Pattern numberPattern = Pattern.compile(numberRegex);
        static String operatorRegex = "[-\u002B\u00D7\u00F7]";
    //    static Pattern operatorPattern = Pattern.compile(operatorRegex);
        static Pattern notationPattern = Pattern.compile(numberRegex + "|" + operatorRegex);
        //    static String numberRegex = "-?\\d+";
        //    static String latinRegex = "[a-wyzA-WYZ]+"; // no x allowed
        //    static String latinRegex = "[a-zA-Z]+";
        //    static Pattern latinPattern = Pattern.compile(latinRegex);
    //    static HashMap<String, BigDecimal> variables = new HashMap<>();
    //    static String variableRegex = numberRegex + "|" + latinRegex;

    //    static String[] errMsg = {
    //            "Invalid expression", "Unknown command", "Invalid assignment", "Unknown variable"
    //    };

        static void initPrecedence() {
    //        precedence.put('(', 1);
    //        precedence.put(')', 1); // Parentheses
            precedence.put('\u00D7', 2); // Multiplication
            precedence.put('\u00F7', 2); // Division
            precedence.put('\u002B', 3); // Addition
            precedence.put('-', 3); // Subtraction
        }

        static String calculate(String raw) {
            return calculatePostfix(convertPostfix(scanInfix(raw))).toPlainString();
        }

        static List<Notation> scanInfix(String s) {
            // scan all variables and map them to values
            List<Notation> matchList = new ArrayList<>();
            Matcher notationMatcher = notationPattern.matcher(s);
            while (notationMatcher.find()) {
                String notation = notationMatcher.group();
                if (notation.matches(numberRegex)) { // if it's a variable, append its value
    //                if (variables.containsKey(notation)) {
    //                    matchList.add(new Notation(variables.get(notation)));
    //                } else {
                        matchList.add(new Notation(new BigDecimal(notation)));
    //                }
                } else { // if it's an operator, append its symbol
                    if (notation.charAt(0) == '\u2212' && notation.length() % 2 == 0) {
                        matchList.add(new Notation('\u002B')); // if it's some even minus, append plus
                    } else {
                        matchList.add(new Notation(notation.charAt(0)));
                    }
                }
            }
            return matchList;
        }

        static List<Notation> convertPostfix(List<Notation> infix) {
            List<Notation> postfix = new ArrayList<>();
            Stack<Character> stack = new Stack<>();

            while (!infix.isEmpty()) {
                Notation symbol = infix.remove(0);
                if (symbol.isVariable) {
                    postfix.add(symbol); // 1. Add operands (numbers and variables) to the result (postfix notation) as they arrive.
                } else {
                    char operator = symbol.operator; // then it's an operator
                    if (stack.isEmpty() || stack.peek() == '(' || operator == '(') { // 5. If the incoming element is a left parenthesis, push it on the stack.
                        stack.push(operator); // 2. If the stack is empty or contains a left parenthesis on top, push the incoming operator on the stack.
                        continue;
                    }
    //
    //                if (operator == ')') { // 6. If the incoming element is a right parenthesis, pop the stack and add operators to the result until you see a left parenthesis.
    //                    while (stack.peek() != '(') {
    //                        postfix.add(new Notation(stack.pop()));
    //                    }
    //                    stack.pop(); // Discard the pair of parentheses.
    //                    continue;
    //                }

                    if (precedence.get(operator) < precedence.get(stack.peek())) {
                        stack.push(operator); // 3. If the incoming operator has higher precedence than the top of the stack, push it on the stack.
                    } else {
                        do {
                            postfix.add(new Notation(stack.pop())); // 4. If the incoming operator has lower or equal precedence than the top of the operator stack, pop the stack and add operators to the result until you see an operator that has a smaller precedence or a left parenthesis on the top of the stack;
                        } while (!stack.isEmpty()
                                && precedence.get(operator) >= precedence.get(stack.peek()));
    //                            && stack.peek() != '(');
                        stack.push(operator); // then add the incoming operator to the stack.
                    }
                }
            }

            while (!stack.isEmpty()) { // 7. At the end of the expression, pop the stack and add all operators to the result.
    //            System.out.println(stack);
                postfix.add(new Notation(stack.pop()));
            }
            return postfix;
        }

        private static BigDecimal calculatePostfix(List<Notation> postfix) {
            Stack<BigDecimal> result = new Stack<>();

            while (!postfix.isEmpty()) {
                Notation element = postfix.remove(0);
                if (element.isVariable) {
                    result.push(element.value);
                } else {
                    char operator = element.operator;
                    BigDecimal a = result.pop();
                    BigDecimal b = result.pop();
                    switch (operator) {
                        case '\u00D7':
                            try {
                                result.push(b.multiply(a).setScale(0, RoundingMode.UNNECESSARY));
                            } catch (Exception e) {
                                result.push(b.multiply(a));
                            }
                            break;
                        case '\u00F7':
                            try {
                                result.push(b.divide(a));
                            } catch (Exception e) {
                                result.push(b.divide(a, 16, RoundingMode.HALF_DOWN));
                            }
                            break;
                        case '\u002B':
                            result.push(b.add(a));
                            break;
                        case '-':
                            result.push(b.subtract(a));
                            break;
                    }
                }
            }

            if (result.size() != 1) {
                System.out.println("WHAT");
            }
            return result.pop();
        }

        static boolean validate(JLabel equationLabel) {
            String equation = equationLabel.getText();
            if (equation.isEmpty()) {
                return false;
            }
            String lastChar = equation.substring(equation.length() - 1);
            if (lastChar.equals(".")) {
                equationLabel.setText(equation + "0");
            } else if (lastChar.matches(operatorRegex)) {
                delete(equationLabel);
            }
            return true;
        }

        public static void assignSubtract(JLabel equationLabel) {
            if (validate(equationLabel)) equationLabel.setText(equationLabel.getText() + "-");
        }

        public static void assignAdd(JLabel equationLabel) {
            if (validate(equationLabel)) equationLabel.setText(equationLabel.getText() + "\u002B");
        }

        public static void assignMultiply(JLabel equationLabel) {
            if (validate(equationLabel)) equationLabel.setText(equationLabel.getText() + "\u00D7");
        }

        public static void assignDivide(JLabel equationLabel) {
            if (validate(equationLabel)) equationLabel.setText(equationLabel.getText() + "\u00F7");
        }

        public static void assignDot(JLabel equationLabel) {
            String equation = equationLabel.getText();
            if (!equation.isEmpty()) {
                String lastChar = equation.substring(equation.length() - 1);
                if (".".equals(lastChar) || lastChar.matches(operatorRegex)) return;
            }
            equationLabel.setText(equation + ".");
        }

        public static void evaluate(JLabel equationLabel, JLabel resultLabel) {
            if (!equationLabel.getText().isEmpty()) {
                String equation = equationLabel.getText();
                if (equation.substring(equation.length() - 1).matches(operatorRegex)) {
                    equationLabel.setForeground(Color.RED.darker());
                } else {
                    try {
                        resultLabel.setText(CalculatorUtil.calculate(equationLabel.getText()));
                    } catch (Exception e) {
                        equationLabel.setForeground(Color.RED.darker());
                    }
                }
            }
        }

        public static void assignNumber(JLabel equationLabel, int i) {
            equationLabel.setForeground(Color.MAGENTA);
            String equation = equationLabel.getText();
            if (equation.equals(".")) {
                equationLabel.setText("0.");
            }
            equationLabel.setText(equationLabel.getText() + i);
        }

        public static void delete(JLabel equationLabel) {
            equationLabel.setForeground(Color.MAGENTA);
            String data = equationLabel.getText();
            equationLabel.setText(data.substring(0, data.length() - 1));
        }

    //    static List<String> scanNames(String s) {
    //        // only scan names
    //        List<String> matchList = new ArrayList<>();
    //        Matcher regexMatcher = latinPattern.matcher(s);
    //        while (regexMatcher.find()) {
    //            matchList.add(regexMatcher.group());
    //        }
    //        return matchList;
    //    }

    //    static List<BigDecimal> scanNumbers(String s) {
    //        // only scan numbers
    //        List<BigDecimal> matchList = new ArrayList<>();
    //        Matcher regexMatcher = numberPattern.matcher(s);
    //        while (regexMatcher.find()) {
    //            matchList.add(new BigDecimal(regexMatcher.group()));
    //        }
    //        return matchList;
    //    }
    //
    //    static List<Character> scanOperators(String s) {
    //        // only scan operator symbols
    //        List<Character> matchList = new ArrayList<>();
    //        Matcher regexMatcher = operatorPattern.matcher(s);
    //        while (regexMatcher.find()) {
    //            matchList.add(regexMatcher.group().charAt(0)); // if it's any notation just add at this step
    //        }
    //        return matchList;
    //    }

    //    static boolean checkValidityOrAssign(String raw) {
    //        List<String> names = scanNames(raw);
    //        List<BigDecimal> numbers = scanNumbers(raw);
    //        List<Character> assignsOrOperators = scanOperators(raw);
    //
    //        if(raw.isEmpty()) return false;
    //        if (names.isEmpty()) { // if no variables
    //            if (!assignsOrOperators.isEmpty()) {
    //                for (char operator : assignsOrOperators) {
    //                    if (operator == '=') {
    ////                        err(2); // err if it has an assign pattern
    //                        return false;
    //                    }
    //                }
    //            }
    //        } else { // if it has variables
    //            if (!assignsOrOperators.isEmpty() && assignsOrOperators.get(0) == '=') { // if it has an assign pattern
    //                if (names.size() + numbers.size() != 2) {
    ////                    err(2); // err if it has not equal to 1 assign pattern
    //                    return false;
    //                } else if (numbers.size() != 0) {
    //                    variables.put(names.get(0), numbers.get(0)); // assign number to variable
    //                } else {
    //                    if (!variables.containsKey(names.get(1))) {
    ////                        err(3); // err if the second variable is unknown
    //                        return false;
    //                    }
    //                    variables.put(names.get(0), variables.get(names.get(1))); // assign variable to variable
    //                }
    //                return false;
    //            } else {
    //                for (String name : names) {
    //                    if (!variables.containsKey(name)) {
    ////                        err(3); // err if it has unknown variables
    //                        return false;
    //                    }
    //                }
    //            }
    //        }
    //        return true; // return true if it is a valid non-assign infix notation
    //    }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/191/stages/957/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Tue, 14 Dec 2021 06:52:38 UTC
record: -1
